"""Add simplified Sleeper sync tables

Revision ID: 6f9432b1809e
Revises: trade_analyzer_001
Create Date: 2025-08-20 22:05:18.197710

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6f9432b1809e'
down_revision: Union[str, Sequence[str], None] = 'trade_analyzer_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_competitor_analysis_id'), table_name='competitor_analysis')
    op.drop_table('competitor_analysis')
    op.drop_index(op.f('ix_fantasy_players_id'), table_name='fantasy_players')
    op.drop_table('fantasy_players')
    op.drop_index(op.f('idx_roster_team_week'), table_name='fantasy_roster_spots')
    op.drop_index(op.f('ix_fantasy_roster_spots_id'), table_name='fantasy_roster_spots')
    op.drop_table('fantasy_roster_spots')
    op.drop_index(op.f('ix_player_analytics_id'), table_name='player_analytics')
    op.drop_table('player_analytics')
    op.drop_index(op.f('ix_trade_evaluations_id'), table_name='trade_evaluations')
    op.drop_table('trade_evaluations')
    op.drop_index(op.f('ix_fantasy_matchups_id'), table_name='fantasy_matchups')
    op.drop_table('fantasy_matchups')
    op.drop_index(op.f('ix_fantasy_transactions_id'), table_name='fantasy_transactions')
    op.drop_table('fantasy_transactions')
    op.drop_index(op.f('ix_trade_recommendations_id'), table_name='trade_recommendations')
    op.drop_table('trade_recommendations')
    op.drop_index(op.f('idx_recommendations_user_active'), table_name='fantasy_recommendations')
    op.drop_index(op.f('ix_fantasy_recommendations_id'), table_name='fantasy_recommendations')
    op.drop_table('fantasy_recommendations')
    op.drop_index(op.f('idx_fantasy_league_sync'), table_name='fantasy_leagues')
    op.drop_index(op.f('ix_fantasy_leagues_id'), table_name='fantasy_leagues')
    op.drop_table('fantasy_leagues')
    op.drop_index(op.f('ix_fantasy_teams_id'), table_name='fantasy_teams')
    op.drop_table('fantasy_teams')
    op.drop_index(op.f('idx_projections_player_week'), table_name='player_projections')
    op.drop_index(op.f('ix_player_projections_id'), table_name='player_projections')
    op.drop_table('player_projections')
    op.drop_index(op.f('ix_trades_id'), table_name='trades')
    op.drop_table('trades')
    op.drop_index(op.f('ix_draft_picks_id'), table_name='draft_picks')
    op.drop_table('draft_picks')
    op.drop_index(op.f('ix_league_historical_data_id'), table_name='league_historical_data')
    op.drop_table('league_historical_data')
    op.drop_index(op.f('ix_team_needs_analysis_id'), table_name='team_needs_analysis')
    op.drop_table('team_needs_analysis')
    op.drop_index(op.f('ix_player_trends_id'), table_name='player_trends')
    op.drop_table('player_trends')
    op.drop_index(op.f('idx_waiver_targets_league_week'), table_name='waiver_wire_targets')
    op.drop_index(op.f('ix_waiver_wire_targets_id'), table_name='waiver_wire_targets')
    op.drop_table('waiver_wire_targets')
    op.drop_index(op.f('idx_fantasy_user_platform'), table_name='fantasy_users')
    op.drop_index(op.f('ix_fantasy_users_id'), table_name='fantasy_users')
    op.drop_table('fantasy_users')
    op.drop_index(op.f('ix_player_values_id'), table_name='player_values')
    op.drop_table('player_values')
    op.add_column('users', sa.Column('sleeper_user_id', sa.String(length=255), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'sleeper_user_id')
    op.create_table('player_values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rest_of_season_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dynasty_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('redraft_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ppr_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('standard_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('superflex_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trade_frequency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_low_indicator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sell_high_indicator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('value_volatility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('injury_risk_factor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('player_values_league_id_fkey')),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('player_values_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('player_values_pkey'))
    )
    op.create_index(op.f('ix_player_values_id'), 'player_values', ['id'], unique=False)
    op.create_table('fantasy_users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('fantasy_users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('platform', postgresql.ENUM('SLEEPER', 'YAHOO', 'ESPN', name='fantasyplatform'), autoincrement=False, nullable=False),
    sa.Column('platform_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('platform_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sync_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fantasy_users_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fantasy_users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_fantasy_users_id'), 'fantasy_users', ['id'], unique=False)
    op.create_index(op.f('idx_fantasy_user_platform'), 'fantasy_users', ['user_id', 'platform'], unique=False)
    op.create_table('waiver_wire_targets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('opportunity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ownership_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trending_direction', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('situation_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('suggested_fab_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rest_of_season_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('immediate_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('waiver_wire_targets_league_id_fkey')),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('waiver_wire_targets_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('waiver_wire_targets_pkey'))
    )
    op.create_index(op.f('ix_waiver_wire_targets_id'), 'waiver_wire_targets', ['id'], unique=False)
    op.create_index(op.f('idx_waiver_targets_league_week'), 'waiver_wire_targets', ['league_id', 'week'], unique=False)
    op.create_table('player_trends',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trend_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('period_start', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('period_end', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('snap_share_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('target_share_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('red_zone_usage_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('carry_share_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fantasy_points_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('efficiency_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('consistency_trend', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('role_change_indicator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('role_change_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('opportunity_change_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('momentum_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sustainability_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_low_indicator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sell_high_indicator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('player_trends_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('player_trends_pkey'))
    )
    op.create_index(op.f('ix_player_trends_id'), 'player_trends', ['id'], unique=False)
    op.create_table('team_needs_analysis',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position_strengths', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('position_needs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('starter_quality', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bench_depth', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_profile', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('championship_contender', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('should_rebuild', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('win_now_mode', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('preferred_trade_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('assets_to_sell', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('targets_to_acquire', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['fantasy_teams.id'], name=op.f('team_needs_analysis_team_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('team_needs_analysis_pkey'))
    )
    op.create_index(op.f('ix_team_needs_analysis_id'), 'team_needs_analysis', ['id'], unique=False)
    op.create_table('league_historical_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('waiver_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('waiver_budget', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scoring_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('teams_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('transactions_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('standings_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('league_historical_data_league_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('league_historical_data_pkey'))
    )
    op.create_index(op.f('ix_league_historical_data_id'), 'league_historical_data', ['id'], unique=False)
    op.create_table('draft_picks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_owner_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_owner_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('round_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pick_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_tradeable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('trade_deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['current_owner_team_id'], ['fantasy_teams.id'], name=op.f('draft_picks_current_owner_team_id_fkey')),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('draft_picks_league_id_fkey')),
    sa.ForeignKeyConstraint(['original_owner_team_id'], ['fantasy_teams.id'], name=op.f('draft_picks_original_owner_team_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('draft_picks_pkey'))
    )
    op.create_index(op.f('ix_draft_picks_id'), 'draft_picks', ['id'], unique=False)
    op.create_table('trades',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('trades_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PROPOSED', 'PENDING', 'ACCEPTED', 'DECLINED', 'EXPIRED', 'CANCELLED', name='tradestatus'), autoincrement=False, nullable=True),
    sa.Column('proposed_by_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team1_gives', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('team2_gives', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('proposed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('trade_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_ai_suggested', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('veto_deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('veto_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name='trades_league_id_fkey'),
    sa.ForeignKeyConstraint(['proposed_by_team_id'], ['fantasy_teams.id'], name='trades_proposed_by_team_id_fkey'),
    sa.ForeignKeyConstraint(['team1_id'], ['fantasy_teams.id'], name='trades_team1_id_fkey'),
    sa.ForeignKeyConstraint(['team2_id'], ['fantasy_teams.id'], name='trades_team2_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='trades_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_trades_id'), 'trades', ['id'], unique=False)
    op.create_table('player_projections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('projected_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('floor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ceiling', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('opponent', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('vegas_implied_total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('game_script_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('target_share', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('red_zone_looks', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('snap_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('player_projections_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('player_projections_pkey'))
    )
    op.create_index(op.f('ix_player_projections_id'), 'player_projections', ['id'], unique=False)
    op.create_index(op.f('idx_projections_player_week'), 'player_projections', ['player_id', 'week', 'season'], unique=False)
    op.create_table('fantasy_teams',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('fantasy_teams_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('platform_team_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('owner_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_user_team', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('wins', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('losses', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ties', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('points_for', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('points_against', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('waiver_position', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('playoff_seed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name='fantasy_teams_league_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fantasy_teams_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_fantasy_teams_id'), 'fantasy_teams', ['id'], unique=False)
    op.create_table('fantasy_leagues',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('fantasy_leagues_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('fantasy_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('platform', postgresql.ENUM('SLEEPER', 'YAHOO', 'ESPN', name='fantasyplatform'), autoincrement=False, nullable=False),
    sa.Column('platform_league_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('league_type', postgresql.ENUM('REDRAFT', 'KEEPER', 'DYNASTY', name='fantasyleaguetype'), autoincrement=False, nullable=True),
    sa.Column('sport', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scoring_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('roster_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('playoff_teams', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trade_deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_synced', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sync_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('waiver_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('waiver_budget', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('waiver_clear_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('roster_positions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['fantasy_user_id'], ['fantasy_users.id'], name='fantasy_leagues_fantasy_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fantasy_leagues_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_fantasy_leagues_id'), 'fantasy_leagues', ['id'], unique=False)
    op.create_index(op.f('idx_fantasy_league_sync'), 'fantasy_leagues', ['fantasy_user_id', 'is_synced'], unique=False)
    op.create_table('fantasy_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recommendation_type', postgresql.ENUM('START_SIT', 'WAIVER_WIRE', 'TRADE', name='recommendationtype'), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('primary_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('secondary_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expected_impact', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_acted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('fantasy_recommendations_league_id_fkey')),
    sa.ForeignKeyConstraint(['primary_player_id'], ['fantasy_players.id'], name=op.f('fantasy_recommendations_primary_player_id_fkey')),
    sa.ForeignKeyConstraint(['secondary_player_id'], ['fantasy_players.id'], name=op.f('fantasy_recommendations_secondary_player_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fantasy_recommendations_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fantasy_recommendations_pkey'))
    )
    op.create_index(op.f('ix_fantasy_recommendations_id'), 'fantasy_recommendations', ['id'], unique=False)
    op.create_index(op.f('idx_recommendations_user_active'), 'fantasy_recommendations', ['user_id', 'is_active'], unique=False)
    op.create_table('trade_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requesting_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trade_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recommendation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('priority_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('suggested_trade', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mutual_benefit_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('likelihood_accepted', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('recommendation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timing_factor', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('was_proposed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('user_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('trade_recommendations_league_id_fkey')),
    sa.ForeignKeyConstraint(['requesting_team_id'], ['fantasy_teams.id'], name=op.f('trade_recommendations_requesting_team_id_fkey')),
    sa.ForeignKeyConstraint(['target_team_id'], ['fantasy_teams.id'], name=op.f('trade_recommendations_target_team_id_fkey')),
    sa.ForeignKeyConstraint(['trade_id'], ['trades.id'], name=op.f('trade_recommendations_trade_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('trade_recommendations_pkey'))
    )
    op.create_index(op.f('ix_trade_recommendations_id'), 'trade_recommendations', ['id'], unique=False)
    op.create_table('fantasy_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('transaction_type', postgresql.ENUM('ADD', 'DROP', 'TRADE', 'WAIVER', name='transactiontype'), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('added_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dropped_player_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('waiver_priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fab_bid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trade_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['added_player_id'], ['fantasy_players.id'], name=op.f('fantasy_transactions_added_player_id_fkey')),
    sa.ForeignKeyConstraint(['dropped_player_id'], ['fantasy_players.id'], name=op.f('fantasy_transactions_dropped_player_id_fkey')),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('fantasy_transactions_league_id_fkey')),
    sa.ForeignKeyConstraint(['team_id'], ['fantasy_teams.id'], name=op.f('fantasy_transactions_team_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fantasy_transactions_pkey'))
    )
    op.create_index(op.f('ix_fantasy_transactions_id'), 'fantasy_transactions', ['id'], unique=False)
    op.create_table('fantasy_matchups',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('matchup_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('team1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team1_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team2_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('fantasy_matchups_league_id_fkey')),
    sa.ForeignKeyConstraint(['team1_id'], ['fantasy_teams.id'], name=op.f('fantasy_matchups_team1_id_fkey')),
    sa.ForeignKeyConstraint(['team2_id'], ['fantasy_teams.id'], name=op.f('fantasy_matchups_team2_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fantasy_matchups_pkey'))
    )
    op.create_index(op.f('ix_fantasy_matchups_id'), 'fantasy_matchups', ['id'], unique=False)
    op.create_table('trade_evaluations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trade_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team1_grade', postgresql.ENUM('A_PLUS', 'A', 'A_MINUS', 'B_PLUS', 'B', 'B_MINUS', 'C_PLUS', 'C', 'C_MINUS', 'D', 'F', name='tradegrade'), autoincrement=False, nullable=False),
    sa.Column('team2_grade', postgresql.ENUM('A_PLUS', 'A', 'A_MINUS', 'B_PLUS', 'B', 'B_MINUS', 'C_PLUS', 'C', 'C_MINUS', 'D', 'F', name='tradegrade'), autoincrement=False, nullable=False),
    sa.Column('team1_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('team2_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('team1_value_given', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team1_value_received', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team2_value_given', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team2_value_received', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('trade_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fairness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('key_factors', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('evaluation_version', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['trade_id'], ['trades.id'], name=op.f('trade_evaluations_trade_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('trade_evaluations_pkey'))
    )
    op.create_index(op.f('ix_trade_evaluations_id'), 'trade_evaluations', ['id'], unique=False)
    op.create_table('player_analytics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('season', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('game_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('opponent', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('total_snaps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('offensive_snaps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('special_teams_snaps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('snap_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('snap_share_rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('targets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('team_total_targets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_share', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('air_yards', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('air_yards_share', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_depth_of_target', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('target_separation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('red_zone_snaps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('red_zone_targets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('red_zone_carries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('red_zone_touches', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('red_zone_share', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('red_zone_efficiency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('routes_run', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('route_participation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('slot_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('deep_target_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('carries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rushing_yards', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('goal_line_carries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('carry_share', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('yards_before_contact', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('yards_after_contact', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('broken_tackles', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('receptions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('receiving_yards', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('yards_after_catch', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('yards_after_catch_per_reception', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('contested_catch_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('drop_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('team_pass_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('team_rush_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('team_red_zone_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('game_script', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_of_possession', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ppr_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('half_ppr_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('standard_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('points_per_snap', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('points_per_target', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('points_per_touch', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('boom_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bust_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('weekly_variance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('floor_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ceiling_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('injury_designation', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('snaps_missed_injury', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('games_missed_season', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('player_analytics_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('player_analytics_pkey'))
    )
    op.create_index(op.f('ix_player_analytics_id'), 'player_analytics', ['id'], unique=False)
    op.create_table('fantasy_roster_spots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position', postgresql.ENUM('QB', 'RB', 'WR', 'TE', 'K', 'DEF', 'FLEX', 'SUPER_FLEX', 'BENCH', 'IR', name='fantasyposition'), autoincrement=False, nullable=False),
    sa.Column('week', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_starter', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('points_scored', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('projected_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['fantasy_players.id'], name=op.f('fantasy_roster_spots_player_id_fkey')),
    sa.ForeignKeyConstraint(['team_id'], ['fantasy_teams.id'], name=op.f('fantasy_roster_spots_team_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fantasy_roster_spots_pkey'))
    )
    op.create_index(op.f('ix_fantasy_roster_spots_id'), 'fantasy_roster_spots', ['id'], unique=False)
    op.create_index(op.f('idx_roster_team_week'), 'fantasy_roster_spots', ['team_id', 'week'], unique=False)
    op.create_table('fantasy_players',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('platform', postgresql.ENUM('SLEEPER', 'YAHOO', 'ESPN', name='fantasyplatform'), autoincrement=False, nullable=False),
    sa.Column('platform_player_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('position', postgresql.ENUM('QB', 'RB', 'WR', 'TE', 'K', 'DEF', 'FLEX', 'SUPER_FLEX', 'BENCH', 'IR', name='fantasyposition'), autoincrement=False, nullable=False),
    sa.Column('team', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('jersey_number', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('college', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INJURED', 'OUT', 'DOUBTFUL', 'QUESTIONABLE', 'PROBABLE', 'BYE', name='playerstatus'), autoincrement=False, nullable=True),
    sa.Column('injury_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('adp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ownership_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('add_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('drop_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fantasy_players_pkey'))
    )
    op.create_index(op.f('ix_fantasy_players_id'), 'fantasy_players', ['id'], unique=False)
    op.create_table('competitor_analysis',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('league_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('seasons_analyzed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('avg_waiver_adds_per_season', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('preferred_positions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('waiver_aggressiveness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_faab_spent_per_season', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('high_faab_bid_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('faab_conservation_tendency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('common_position_needs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('panic_drop_tendency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('waiver_claim_day_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('season_phase_activity', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['league_id'], ['fantasy_leagues.id'], name=op.f('competitor_analysis_league_id_fkey')),
    sa.ForeignKeyConstraint(['team_id'], ['fantasy_teams.id'], name=op.f('competitor_analysis_team_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('competitor_analysis_pkey'))
    )
    op.create_index(op.f('ix_competitor_analysis_id'), 'competitor_analysis', ['id'], unique=False)
    # ### end Alembic commands ###
