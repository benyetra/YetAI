name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      
    - name: Clean previous builds
      run: rm -rf .next && rm -rf node_modules/.cache

    - name: Run linting
      run: npm run lint || echo "Linting completed with warnings/errors - continuing build"
      continue-on-error: true

    - name: Run type checking
      run: npm run type-check
      continue-on-error: true

    - name: Run tests
      run: npm run test:ci
      env:
        CI: true
        NEXT_PUBLIC_API_URL: "https://backend-production-f7af.up.railway.app"

    - name: Verify TypeScript paths
      run: |
        echo "Checking TypeScript configuration..."
        cat tsconfig.json | grep -A 5 "paths"
        echo "Verifying api-config exists..."
        ls -la src/lib/api-config.ts
        
    - name: Run build test
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: "https://backend-production-f7af.up.railway.app"
        NODE_ENV: "production"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 1

  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: "https://backend-production-f7af.up.railway.app"

    - name: Run accessibility tests
      run: |
        npm install -g @axe-core/cli
        npm run start &
        sleep 10
        axe http://localhost:3000 --exit
      continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: Check for vulnerable dependencies
      run: |
        npm install -g audit-ci
        audit-ci --config ./audit-ci.json
      continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      run: |
        url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "Preview URL: $url"
        echo "PREVIEW_URL=$url" >> $GITHUB_ENV

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, accessibility-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_API_URL: "https://staging-backend.up.railway.app"

    - name: Deploy Project Artifacts to Vercel Staging
      run: |
        url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "Staging URL: $url"

    - name: Run staging health check
      run: |
        sleep 30
        curl -f https://staging.yetai.app || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, accessibility-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        NEXT_PUBLIC_API_URL: "https://backend-production-f7af.up.railway.app"

    - name: Deploy Project Artifacts to Vercel Production
      run: |
        url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "Production URL: $url"

    - name: Run production health check
      run: |
        sleep 30
        curl -f https://yetai.app || exit 1

    - name: Test frontend functionality
      run: |
        # Test main pages
        curl -f https://yetai.app
        curl -f https://yetai.app/login
        curl -f https://yetai.app/dashboard
        echo "‚úÖ All frontend pages responding correctly"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ Frontend deployment to production successful!"
        echo "‚úÖ Health checks passed"
        echo "‚úÖ Main pages validated"

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: false # Lighthouse disabled - set to 'github.ref == "refs/heads/main" && github.event_name == "push"' to enable
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Prepare Lighthouse reports directory
      run: mkdir -p ./lighthouse-reports

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to be fully ready..."
        sleep 60
        # Test if the site is accessible
        curl -f -s https://yetai.app/ > /dev/null || {
          echo "Site not accessible, skipping Lighthouse audit"
          exit 0
        }

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        # Run lighthouse audit with basic configuration
        lhci autorun --config=./lighthouserc.js || {
          echo "Lighthouse audit failed, but continuing deployment"
          exit 0
        }
      continue-on-error: true
      env:
        # Use environment variable for tokens if available
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

    - name: Upload Lighthouse reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports
        path: frontend/lighthouse-reports
        retention-days: 7
      continue-on-error: true

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, accessibility-test, security-scan, deploy-production]
    if: failure() && !cancelled()
    
    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Frontend CI/CD pipeline failed"
        echo "Please check the logs and fix issues before retrying"