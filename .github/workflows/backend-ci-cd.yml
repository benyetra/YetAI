name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
      - 'railway.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PostgreSQL
      run: |
        # Start PostgreSQL service
        sudo systemctl start postgresql.service

        # Create user and database
        sudo -u postgres createuser --superuser test_user
        sudo -u postgres psql -c "ALTER USER test_user PASSWORD 'test_password';"
        sudo -u postgres createdb -O test_user test_db

        # Find PostgreSQL version and configure
        PG_VERSION=$(sudo -u postgres psql -c "SHOW server_version;" | grep -oE '[0-9]+\.[0-9]+' | head -1 | cut -d. -f1)
        echo "Found PostgreSQL version: $PG_VERSION"

        # Configure PostgreSQL for connections
        sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/$PG_VERSION/main/postgresql.conf
        echo "host all all 0.0.0.0/0 md5" | sudo tee -a /etc/postgresql/$PG_VERSION/main/pg_hba.conf

        # Restart PostgreSQL
        sudo systemctl restart postgresql.service

        # Test connection
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -c "SELECT version();"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export ENVIRONMENT="testing"
        export SECRET_KEY="test-secret-key"
        export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"

    - name: Run linting
      run: |
        pip install flake8 black
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        ENVIRONMENT: "testing"
        SECRET_KEY: "test-secret-key"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r . -x tests/ --skip B311,B110,B112,B104,B324,B113,B101

    - name: Check for known security vulnerabilities
      run: safety check -r requirements.txt || true

  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for Railway auto-deploy
      run: |
        echo "Railway is auto-deploying from GitHub..."
        echo "Commit: ${{ github.sha }}"
        echo "Waiting for deployment to complete (90 seconds)..."
        sleep 90

    - name: Run comprehensive deployment validation
      run: |
        chmod +x backend/scripts/validate_deployment.sh
        bash backend/scripts/validate_deployment.sh https://api.yetai.app

    - name: Check deployment commit hash
      run: |
        echo "Verifying deployed version..."
        DEPLOYED_VERSION=$(curl -s https://api.yetai.app/api/status | grep -o '"version":"[^"]*"' || echo "unknown")
        echo "Deployed version: $DEPLOYED_VERSION"

    - name: Test registration endpoint
      run: |
        echo "Testing registration endpoint with Pydantic model..."
        curl -X POST https://api.yetai.app/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","username":"testuser","password":"testpass123"}' \
          -w "\nHTTP Status: %{http_code}\n" || echo "Registration test completed"

    - name: Notify deployment success
      if: success()
      run: |
        echo "Backend deployment to production successful!"
        echo "Health checks passed"
        echo "API endpoints validated"
        echo "Deployment URL: https://api.yetai.app"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, security-scan, validate-deployment]
    if: failure()

    steps:
    - name: Notify failure
      run: |
        echo "Backend CI/CD pipeline failed"
        echo "Please check the logs and fix issues before retrying"
        echo "Common issues:"
        echo "  - Test failures"
        echo "  - Security vulnerabilities"
        echo "  - Deployment health check timeout"
        echo "  - Railway build errors"
